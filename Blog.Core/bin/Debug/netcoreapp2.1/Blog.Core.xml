<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core</name>
    </assembly>
    <members>
        <member name="T:Blog.Core.AOP.BlogCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:Blog.Core.AOP.BlogLogAOP">
            <summary>
            拦截器BlogLogAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:Blog.Core.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:Blog.Core.AOP.ICaching">
            <summary>
            简单的缓存接口，只有查询和添加，以后会进行扩展
            </summary>
        </member>
        <member name="T:Blog.Core.AOP.MemoryCaching">
            <summary>
            实例化缓存接口ICaching
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtHelper.IssueJWT(Blog.Core.AuthHelper.TokenModelJWT)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtHelper.SerializeJWT(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.AuthHelper.TokenModelJWT">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.TokenModelJWT.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.TokenModelJWT.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.TokenModelJWT.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:Blog.Core.AuthHelper.JwtTokenAuth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Blog.Core.AuthHelper.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Blog.Core.AuthHelper.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.AutoMapper.CustomProfile.#ctor">
            <summary>
            配置构造函数，用来创建关系映射
            </summary>
        </member>
        <member name="T:Blog.Core.Controllers.BlogController">
            <summary>
            Blog控制器所有接口
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.#ctor(Blog.Core.IServices.IAdvertisementServices,Blog.Core.IServices.IBlogArticleServices,Blog.Core.Common.IRedisCacheManager)">
            <summary>
            构造函数
            </summary>
            <param name="advertisementServices"></param>
            <param name="blogArticleServices"></param>
            <param name="redisCacheManager"></param>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.GetBlogs">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Get(System.Int32)">
            <summary>
            获取详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.GetBlogsCache">
            <summary>
            获取详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.LoginController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJWTStr(System.Int64,System.String)">
            <summary>
            获取JWT的重写方法，推荐这种，注意在文件夹OverWrite下
            </summary>
            <param name="id">id</param>
            <param name="sub">角色</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.ValuesController">
            <summary>
            Values控制器
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Get">
            <summary>
            Get方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Get(System.Int32)">
            <summary>
            Get(int id)方法
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Post(Blog.Core.Model.Love)">
            <summary>
            post
            </summary>
            <param name="love">model实体类参数</param>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            Put方法
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            Delete方法
            </summary>
            <param name="id"></param>
        </member>
    </members>
</doc>
